plugins {
    id "com.github.spotbugs"
    id "jacoco"
    id "checkstyle"
    id "org.ec4j.editorconfig"
}

dependencies {
    testCompileOnly("org.projectlombok:lombok")
    testAnnotationProcessor("org.projectlombok:lombok")

    testImplementation("org.junit.jupiter:junit-jupiter")
    testImplementation("org.junit.jupiter:junit-jupiter-api")
    testImplementation("org.junit.jupiter:junit-jupiter-params")
    testImplementation("org.junit.jupiter:junit-jupiter-engine")
    testImplementation("net.jqwik:jqwik:${jqwikVersion}")
    testImplementation("org.assertj:assertj-core")

    testImplementation("org.junit.platform:junit-platform-launcher")
    testImplementation("org.junit.platform:junit-platform-commons")
}

spotbugs {
    toolVersion = '4.8.5'
    ignoreFailures = false
    reportLevel = "high"
    spotbugsTest.enabled = false
}

spotbugsMain {
    reports {
        xml {
            enabled = true
        }
        html {
            enabled = true
        }
        text {
            enabled = true
        }
    }
}

tasks.register("printSpotbugsMain") {
    doLast {
        File mainResult = file("${buildDir}/reports/spotbugs/main.txt")
        if (mainResult.exists()) {
            mainResult.readLines().forEach {
                println(it)
            }
        }
    }
}
tasks.getByPath("spotbugsMain").finalizedBy("printSpotbugsMain")

jacoco {
    toolVersion = "0.8.12"
    reportsDirectory = file("${buildDir}/reports/jacoco")
}

jacocoTestReport {
    afterEvaluate {
        classDirectories.setFrom(file("${buildDir}/classes/main"))
    }

    reports {
        xml.required = true
        xml.destination file("${buildDir}/reports/jacoco/report.xml")
        csv.required = false
        html.required = true
        html.destination file("${buildDir}/reports/jacoco/html")
    }
}

jacocoTestCoverageVerification {
    afterEvaluate {
        classDirectories.setFrom(file("${buildDir}/classes/main"))
    }

    violationRules {
        rule {
            limit {
                counter = "LINE"
                // minimum = 0.3
            }
        }
    }
}

editorconfig {
    excludes = ["build"]
}

test {
    useJUnitPlatform {
        includeEngines "jqwik"
    }
}

check.dependsOn editorconfigCheck
check.dependsOn jacocoTestCoverageVerification

checkstyle {
    configFile = file("${project.rootDir}/tool/naver-checkstyle-rules.xml")
    configProperties = ["suppressionFile": "${project.rootDir}/tool/naver-checkstyle-suppressions.xml"]
    toolVersion = "10.16.0"
    ignoreFailures = false
    maxErrors = 0
    maxWarnings = 0
}
